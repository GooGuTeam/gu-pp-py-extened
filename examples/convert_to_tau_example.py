"""
将 .osu 谱面转换为 Tau 格式的示例

示例展示如何使用仓库内的解析器与转换器：
 1. 使用 any.osu_parser.parse_osu_file 解析 .osu 文本
 2. 调用 tau.convertor.convert_osu_beatmap 将其转换为 TauBeatmap
 3. 输出一些转换后的信息

将本文件放在 examples/ 下，直接运行即可（确保 PYTHONPATH 包含 src 目录）。
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from any.osu_parser import parse_osu_file
from tau.convertor import convert_osu_beatmap

# 用于难度与性能计算
from tau.difficulty.difficultyCalculator import TauDifficultyCalculator
from tau.performance.tauPerformanceCalculator import TauPerformanceCalculator
from tau.attributes import TauDifficultyAttributes

# 一个极简的 .osu 示例（你也可以将内容替换为实际文件内容）
SAMPLE_OSU = """osu file format v14

[General]
AudioFilename: affection.mp3
AudioLeadIn: 1000
PreviewTime: 50293
Countdown: 0
SampleSet: Soft
StackLeniency: 0.7
Mode: 0
LetterboxInBreaks: 0
WidescreenStoryboard: 0

[Editor]
DistanceSpacing: 1.7
BeatDivisor: 4
GridSize: 8
TimelineZoom: 1.4

[Metadata]
Title:affection (Short Ver.)
TitleUnicode:affection (Short Ver.)
Artist:solfa feat. KOTOKO
ArtistUnicode:solfa feat. KOTOKO
Creator:-Yuzuriha
Version:Hard
Source:レーシャル・マージ
Tags:featured artist fa AXL racial merge visual novel eroge OP opening chronicle marine stage 橋咲透 tooru hashizaki japanese pop jpop j-pop chirony -Maruk-
BeatmapID:522799
BeatmapSetID:223711

[Difficulty]
HPDrainRate:4
CircleSize:4
OverallDifficulty:6
ApproachRate:8
SliderMultiplier:1.3
SliderTickRate:1

[Events]
//Background and Video events
0,0,"BG.jpg",0,0
//Break Periods
//Storyboard Layer 0 (Background)
//Storyboard Layer 1 (Fail)
//Storyboard Layer 2 (Pass)
//Storyboard Layer 3 (Foreground)
//Storyboard Layer 4 (Overlay)
//Storyboard Sound Samples

[TimingPoints]
1140,307.692307692308,4,2,1,40,1,0
1140,-133.333333333333,4,2,2,40,0,0
8216,-100,4,2,1,40,0,0
8524,-100,4,2,1,60,0,0
18370,-100,4,2,1,50,0,0
36986,-100,4,2,1,45,0,0
37293,-100,4,2,1,40,0,0
37601,-100,4,2,1,35,0,0
37909,-100,4,2,1,30,0,0
38063,-100,4,2,1,50,0,0
47909,-100,4,2,1,40,0,0
48216,-100,4,2,1,45,0,0
48524,-100,4,2,1,50,0,0
48832,-100,4,2,1,55,0,0
49140,-100,4,2,1,60,0,0
49447,-100,4,2,1,65,0,0
49755,-100,4,2,1,70,0,0
50063,-100,4,2,3,70,0,0
50370,-100,4,2,1,70,0,1
60140,-100,4,2,1,70,0,0
60216,-100,4,2,1,70,0,1
70063,-133.333333333333,4,2,2,50,0,0
73755,-100,4,2,1,60,0,0
74216,-100,4,2,1,70,0,0
84216,-100,4,2,1,60,0,0
84832,307.692307692308,7,2,1,60,1,0
86986,307.692307692308,3,2,1,60,1,0
87909,307.692307692308,7,2,1,60,1,0
90063,307.692307692308,3,2,1,60,1,0


[Colours]
Combo1 : 255,0,128
Combo2 : 7,226,216
Combo3 : 89,255,89
Combo4 : 249,124,0
Combo5 : 255,128,255

[HitObjects]
357,255,1140,6,0,L|374:150,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
298,121,1601,2,0,L|281:226,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
250,294,2063,2,0,L|186:304,1,48.750001859665,2|0,0:0|0:0,0:0:0:0:
198,218,2370,2,0,L|96:233,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
113,149,2832,2,0,L|215:134,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
281,93,3293,1,0,0:0:0:0:
426,172,3601,6,0,P|417:209|355:258,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
292,248,4063,2,0,P|301:211|363:162,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
385,99,4524,2,0,L|365:47,1,48.750001859665,2|0,0:0|0:0,0:0:0:0:
291,19,4832,2,0,P|246:19|178:47,1,97.50000371933,2|2,0:0|0:0,0:0:0:0:
139,95,5293,1,2,0:0:0:0:
143,177,5447,2,0,P|147:202|147:237,2,48.750001859665,0|2|2,0:0|0:0|0:0,0:0:0:0:
256,192,5832,12,4,8216,0:3:0:0:
383,129,8524,6,0,L|300:122,1,65,4|0,3:2|0:0,0:0:0:0:
239,182,8832,1,8,0:0:0:0:
239,182,8986,1,0,0:0:0:0:
308,250,9140,2,0,L|302:321,1,65,0|0,3:0|3:0,0:0:0:0:
400,257,9447,1,8,0:0:0:0:
400,257,9601,2,0,L|381:113,1,130,0|0,3:0|3:0,0:0:0:0:
312,59,10063,2,0,P|269:64|194:129,1,130,8|8,0:0|0:0,0:0:0:0:
194,212,10524,1,0,3:0:0:0:
194,212,10678,2,0,P|205:267|206:298,1,65,8|0,0:0|3:0,0:0:0:0:
263,355,10986,6,0,P|302:356|333:350,2,65,4|0|8,3:2|3:0|0:0,0:0:0:0:
295,263,11447,1,0,0:0:0:0:
316,167,11601,2,0,L|392:177,1,65,0|0,3:0|3:0,0:0:0:0:
451,107,11909,1,8,0:0:0:0:
368,54,12063,2,0,P|298:60|246:93,1,130,0|0,3:0|3:0,0:0:0:0:
181,161,12524,2,0,P|193:231|197:302,1,130,8|8,0:0|0:0,0:0:0:0:
116,346,12986,1,0,3:0:0:0:
20,364,13140,2,0,P|28:331|33:294,1,65,8|0,0:0|3:0,0:0:0:0:
52,204,13447,6,0,P|88:212|131:203,2,65,4|0|8,3:2|3:0|0:0,0:0:0:0:
59,106,13909,1,0,0:0:0:0:
130,39,14063,2,0,L|207:52,1,65,0|0,3:0|3:0,0:0:0:0:
289,70,14370,1,8,0:0:0:0:
229,147,14524,2,0,P|289:166|358:134,1,130,0|0,3:0|3:0,0:0:0:0:
439,103,14986,2,0,P|431:169|427:257,1,130,8|8,0:0|0:0,0:0:0:0:
385,320,15447,1,0,3:0:0:0:
312,255,15601,2,0,P|272:252|228:255,1,65,8|0,0:0|3:0,0:0:0:0:
151,276,15909,6,0,P|128:312|119:355,2,65,4|0|8,3:2|3:0|0:0,0:0:0:0:
181,185,16370,1,0,0:0:0:0:
181,185,16524,2,0,L|175:104,1,65,0|0,3:0|3:0,0:0:0:0:
212,29,16832,1,8,0:0:0:0:
308,32,16986,2,0,P|335:94|297:158,1,130,0|0,3:0|3:0,0:0:0:0:
288,242,17447,2,0,P|289:296|295:317,1,65,8|0,0:0|3:0,0:0:0:0:
377,257,17755,1,8,0:0:0:0:
407,164,17909,2,0,P|413:142|429:113,2,32.5,8|0|4,0:3|0:0|0:3,0:0:0:0:
311,147,18216,1,0,3:0:0:0:
234,85,18370,6,0,B|177:86|177:86|163:81|163:81|89:84,1,130,4|8,3:2|0:0,0:0:0:0:
40,157,18832,1,0,0:0:0:0:
108,226,18986,2,0,P|129:196|135:155,1,65,0|0,3:0|3:0,0:0:0:0:
231,186,19293,2,0,P|283:204|294:211,1,65,8|0,0:0|0:0,0:0:0:0:
282,307,19601,2,0,P|230:289|219:282,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
379,322,20063,2,0,L|403:178,1,130,0|0,3:0|3:0,0:0:0:0:
397,96,20524,2,0,L|322:76,1,65,8|0,0:0|0:0,0:0:0:0:
240,51,20832,6,0,P|182:58|130:106,1,130,0|8,3:0|0:0,0:0:0:0:
134,202,21293,2,0,P|192:195|244:147,1,130,0|0,3:0|3:0,0:0:0:0:
317,212,21755,2,0,P|292:261|284:281,1,65,8|0,0:0|3:0,0:0:0:0:
263,365,22063,1,0,3:0:0:0:
263,365,22216,1,0,3:0:0:0:
359,353,22370,2,0,P|411:357|443:369,1,65,8|0,0:0|3:0,0:0:0:0:
465,271,22678,2,0,P|413:267|381:255,1,65,8|0,0:0|3:0,0:0:0:0:
317,212,22986,1,8,0:0:0:0:
164,332,23293,6,0,P|86:345|25:363,1,130,4|8,3:2|0:0,0:0:0:0:
53,262,23755,2,0,P|69:191|97:109,1,130,0|0,3:0|3:0,0:0:0:0:
180,110,24216,2,0,P|196:142|208:184,1,65,8|0,0:0|0:0,0:0:0:0:
259,251,24524,2,0,P|307:252|370:185,1,130,0|8,3:0|0:0,0:0:0:0:
437,133,24986,1,0,3:0:0:0:
451,229,25140,2,0,L|445:301,1,65,0|0,0:0|3:0,0:0:0:0:
349,275,25447,2,0,L|355:347,1,65,8|0,0:0|3:0,0:0:0:0:
260,311,25755,6,0,P|237:249|262:191,1,130,0|8,3:0|0:0,0:0:0:0:
306,107,26216,1,8,0:0:0:0:
210,86,26370,2,0,B|164:105|164:105|147:123|147:123|92:147,1,130,0|8,3:0|0:0,0:0:0:0:
25,327,26986,2,0,L|179:333,1,130,0|8,3:0|0:0,0:0:0:0:
248,305,27447,2,0,L|402:311,1,130,8|8,0:3|0:0,0:0:0:0:
437,232,27909,2,0,P|442:204|441:189,2,32.5,8|0|0,0:0|0:0|0:0,0:0:0:0:
344,201,28216,6,0,L|263:218,1,65,4|0,3:2|0:0,0:0:0:0:
282,116,28524,2,0,L|201:133,1,65,8|0,0:0|0:0,0:0:0:0:
124,156,28832,2,0,P|104:198|100:232,1,65,0|0,3:0|3:0,0:0:0:0:
120,312,29140,2,0,P|166:304|199:307,1,65,8|0,0:0|3:0,0:0:0:0:
281,310,29447,2,0,P|283:343|290:383,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
377,293,29909,2,0,P|338:242|322:176,1,130,0|0,3:0|3:0,0:0:0:0:
286,88,30370,2,0,P|322:81|369:96,1,65,8|0,0:0|0:0,0:0:0:0:
322,179,30678,6,0,P|269:173|179:166,1,130,0|8,3:0|0:0,0:0:0:0:
94,159,31140,2,0,P|75:94|107:36,2,130,0|0|0,3:0|3:0|3:0,0:0:0:0:
137,246,31909,2,0,L|126:322,1,65,0|0,3:0|3:0,0:0:0:0:
219,277,32216,2,0,L|208:353,1,65,8|0,0:0|3:0,0:0:0:0:
304,368,32524,1,8,0:0:0:0:
393,328,32678,1,0,3:0:0:0:
414,232,32832,1,8,0:0:0:0:
318,61,33140,6,0,L|169:40,1,130,4|8,3:2|0:0,0:0:0:0:
103,89,33601,2,0,L|114:228,1,130,0|0,3:0|3:0,0:0:0:0:
182,287,34063,1,8,0:0:0:0:
182,287,34216,1,0,3:0:0:0:
227,200,34370,2,0,L|226:115,1,65,0|0,3:0|3:0,0:0:0:0:
324,139,34678,1,8,0:0:0:0:
298,233,34832,2,0,P|242:277|169:249,1,130,0|0,3:0|3:0,0:0:0:0:
95,235,35293,2,0,P|63:229|25:238,1,65,8|0,0:0|0:0,0:0:0:0:
31,333,35601,6,0,L|171:361,1,130,0|8,3:0|0:0,0:0:0:0:
255,370,36063,1,0,0:0:0:0:
351,376,36216,2,0,P|343:310|337:222,1,130,0|8,3:0|0:0,0:0:0:0:
392,166,36678,1,8,3:0:0:0:
392,166,36832,5,4,3:2:0:0:
372,70,36986,2,0,L|381:28,2,32.5,8|0|4,3:0|3:0|3:0,0:0:0:0:
275,55,37293,1,8,3:0:0:0:
246,148,37447,2,0,P|211:148|159:154,1,65,4|8,3:0|3:0,0:0:0:0:
100,204,37755,1,4,3:0:0:0:
100,204,37909,1,8,3:0:0:0:
126,297,38063,6,0,P|190:322|246:289,2,130,4|8|0,3:2|0:0|3:0,0:0:0:0:
184,218,38832,1,0,3:0:0:0:
269,170,38986,2,0,P|318:175|353:192,1,65,8|0,0:0|0:0,0:0:0:0:
384,262,39293,2,0,P|429:198|422:140,1,130,0|8,3:0|0:0,0:0:0:0:
373,65,39755,2,0,L|232:77,1,130,0|0,3:0|3:0,0:0:0:0:
146,86,40216,2,0,L|156:179,1,65,8|0,0:0|0:0,0:0:0:0:
166,247,40524,5,0,3:0:0:0:
351,185,40832,1,8,0:0:0:0:
234,341,41140,2,0,P|199:365|166:372,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
245,244,41601,1,0,0:0:0:0:
245,244,41755,2,0,P|238:171|228:93,1,130,0|8,3:0|0:0,0:0:0:0:
308,54,42216,2,0,P|344:56|382:62,1,65,0|8,3:0|3:0,0:0:0:0:
424,143,42524,1,0,3:0:0:0:
348,204,42678,2,0,P|343:225|340:250,2,32.5,8|0|0,0:0|0:0|0:0,0:0:0:0:
405,283,42986,6,0,P|373:306|275:275,1,130,4|8,3:2|0:0,0:0:0:0:
251,200,43447,1,0,0:0:0:0:
238,103,43601,2,0,L|164:90,1,65,0|0,3:0|3:0,0:0:0:0:
110,166,43909,2,0,L|184:179,1,65,8|0,0:0|0:0,0:0:0:0:
256,228,44216,2,0,P|242:293|231:370,1,130,0|8,3:0|0:0,0:0:0:0:
329,371,44678,2,0,P|343:306|354:229,1,130,0|0,3:0|3:0,0:0:0:0:
437,194,45140,2,0,P|474:199|515:209,1,65,8|0,0:0|0:0,0:0:0:0:
477,110,45447,6,0,P|411:98|345:82,1,130,0|8,3:0|0:0,0:0:0:0:
252,92,45909,1,0,3:0:0:0:
175,153,46063,2,0,P|181:199|185:230,1,65,0|0,3:0|3:0,0:0:0:0:
132,300,46370,2,0,P|138:346|142:377,1,65,8|0,0:0|3:0,0:0:0:0:
238,370,46678,2,0,P|301:348|331:282,1,130,8|8,3:2|3:0,0:0:0:0:
328,196,47140,1,8,0:0:0:0:
297,104,47293,2,0,P|296:67|300:33,2,65,4|8|8,3:0|0:0|0:0,0:0:0:0:
113,36,47909,6,0,L|116:115,1,65,2|2,0:0|0:0,0:0:0:0:
36,158,48216,2,0,L|33:93,1,65,2|2,0:0|0:0,0:0:0:0:
123,132,48524,2,0,L|120:196,1,65,2|2,0:0|0:0,0:0:0:0:
40,253,48832,2,0,L|37:188,1,65,2|2,0:0|0:0,0:0:0:0:
128,278,49140,5,2,0:0:0:0:
218,242,49293,1,2,0:0:0:0:
275,321,49447,2,0,P|233:332|193:347,1,65,2|2,0:0|0:0,0:0:0:0:
115,355,49755,1,2,0:0:0:0:
135,259,49909,1,2,0:0:0:0:
144,161,50063,1,4,0:0:0:0:
273,16,50370,5,4,3:2:0:0:
273,16,50524,1,0,3:0:0:0:
315,103,50678,2,0,P|317:133|310:177,1,65,8|0,0:0|0:0,0:0:0:0:
246,240,50986,2,0,P|306:212|381:254,1,130,0|8,3:0|0:0,0:0:0:0:
312,315,51447,6,0,P|251:340|181:311,1,130,0|0,3:0|3:0,0:0:0:0:
135,241,51909,2,0,P|101:249|55:254,1,65,8|0,0:0|3:0,0:0:0:0:
64,155,52216,2,0,P|98:147|144:142,1,65,8|0,0:0|3:0,0:0:0:0:
225,137,52524,2,0,P|221:96|212:67,1,65,8|8,0:0|0:0,0:0:0:0:
301,28,52832,5,4,3:2:0:0:
301,28,52986,1,0,3:0:0:0:
391,65,53140,2,0,P|370:102|358:133,1,65,8|0,0:0|3:0,0:0:0:0:
368,220,53447,2,0,P|372:286|369:354,1,130,0|8,3:0|3:2,0:0:0:0:
271,356,53909,6,0,P|251:311|158:324,1,130,8|8,0:0|0:0,0:0:0:0:
100,365,54370,1,8,3:2:0:0:
157,286,54524,1,0,3:0:0:0:
81,153,54832,1,8,0:0:0:0:
239,39,55140,6,0,B|293:46|293:46|313:60|313:60|378:68,1,130,4|0,3:2|3:0,0:0:0:0:
404,155,55601,1,8,0:0:0:0:
318,201,55755,1,0,3:0:0:0:
376,278,55909,2,0,P|399:260|420:212,1,65,8|8,0:0|0:0,0:0:0:0:
381,138,56216,1,0,3:0:0:0:
283,135,56370,6,0,L|285:285,1,130,4|0,3:2|3:0,0:0:0:0:
193,300,56832,2,0,P|158:268|145:233,1,65,8|0,0:0|3:0,0:0:0:0:
199,167,57140,2,0,P|234:199|247:234,1,65,8|8,0:0|0:0,0:0:0:0:
275,305,57447,1,0,3:0:0:0:
211,378,57601,6,0,P|163:343|79:335,1,130,4|0,3:2|3:0,0:0:0:0:
46,246,58063,2,0,P|52:201|48:162,1,65,8|0,0:0|0:0,0:0:0:0:
142,148,58370,2,0,P|136:193|140:232,1,65,8|0,0:0|0:0,0:0:0:0:
224,256,58678,1,8,0:0:0:0:
306,204,58832,1,0,0:0:0:0:
267,114,58986,6,0,L|278:260,1,130,12|8,0:0|0:0,0:0:0:0:
334,322,59447,1,8,0:3:0:0:
431,332,59601,1,4,0:3:0:0:
496,260,59755,2,0,P|497:237|491:210,5,32.5,8|8|8|8|8|8,0:0|0:0|0:0|0:0|0:0|0:0,0:0:0:0:
473,183,60216,6,0,P|423:193|387:193,1,65,4|0,3:2|3:0,0:0:0:0:
319,154,60524,2,0,P|340:117|350:81,1,65,8|0,0:0|0:0,0:0:0:0:
278,25,60832,2,0,P|236:20|206:18,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
236,113,61293,6,0,L|214:265,1,130,0|0,3:0|3:0,0:0:0:0:
288,309,61755,2,0,L|294:386,1,65,8|0,0:0|3:0,0:0:0:0:
386,342,62063,2,0,L|380:277,1,65,8|0,0:0|3:0,0:0:0:0:
389,179,62370,1,8,0:0:0:0:
389,179,62524,1,8,0:0:0:0:
359,86,62678,6,0,P|396:84|435:94,2,65,4|0|8,3:2|3:0|0:0,0:0:0:0:
272,39,63140,1,0,3:0:0:0:
175,47,63293,2,0,P|140:91|133:113,1,65,0|0,3:0|0:0,0:0:0:0:
110,193,63601,1,8,3:2:0:0:
204,168,63755,6,0,P|252:166|317:240,1,130,8|8,0:0|0:0,0:0:0:0:
303,314,64216,1,8,3:2:0:0:
399,326,64370,1,0,3:0:0:0:
411,131,64678,1,8,0:0:0:0:
254,14,64986,6,0,L|265:159,1,130,4|0,3:2|3:0,0:0:0:0:
288,237,65447,2,0,P|322:230|369:225,1,65,8|0,0:0|3:0,0:0:0:0:
450,231,65755,2,0,L|444:313,2,65,8|8|0,0:0|0:0|3:0,0:0:0:0:
452,133,66216,6,0,P|430:95|328:93,1,130,4|0,3:2|3:0,0:0:0:0:
262,123,66678,2,0,P|220:125|190:119,1,65,8|0,0:0|3:0,0:0:0:0:
103,92,66986,2,0,P|112:56|117:21,2,65,8|8|0,0:0|0:0|3:0,0:0:0:0:
86,188,67447,6,0,P|98:244|111:340,1,130,4|0,3:2|3:0,0:0:0:0:
199,351,67909,2,0,P|217:313|245:276,1,65,8|0,0:0|3:0,0:0:0:0:
292,219,68216,2,0,P|327:238|347:267,1,65,8|0,0:0|3:0,0:0:0:0:
392,341,68524,2,0,P|425:311|436:278,1,65,8|0,0:0|3:0,0:0:0:0:
424,195,68832,6,0,P|404:135|382:65,1,130,12|8,0:0|0:0,0:0:0:0:
297,26,69293,1,8,0:0:0:0:
241,106,69447,1,4,0:3:0:0:
224,202,69601,2,0,L|224:247,5,32.5,8|8|8|8|8|8,0:0|0:0|0:0|0:0|0:0|0:0,0:0:0:0:
244,270,70063,6,0,P|297:257|351:272,1,97.50000371933,14|0,0:0|0:0,0:0:0:0:
321,346,70524,2,0,P|268:359|214:344,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
145,330,70986,2,0,P|112:322|84:326,1,48.750001859665,2|0,0:0|0:0,0:0:0:0:
15,307,71293,2,0,L|33:190,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
53,130,71755,2,0,P|101:116|156:144,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
198,194,72216,1,2,0:0:0:0:
341,111,72524,6,0,L|327:218,1,97.50000371933,2|0,0:0|0:0,0:0:0:0:
332,291,72986,2,0,P|307:290|287:278,1,48.750001859665,2|0,0:0|0:0,0:0:0:0:
239,210,73293,1,0,0:0:0:0:
184,272,73447,2,0,L|186:326,1,48.750001859665,2|0,0:0|0:0,0:0:0:0:
152,200,73755,6,0,L|181:46,1,130,4|4,0:0|0:3,0:0:0:0:
260,22,74216,2,0,P|296:26|325:43,1,65,8|4,0:3|0:3,0:0:0:0:
385,113,74524,1,4,0:3:0:0:
412,206,74678,1,2,0:3:0:0:
255,127,74986,6,0,P|212:132|176:127,1,65,4|0,3:2|0:0,0:0:0:0:
182,227,75293,2,0,P|138:231|102:226,1,65,8|0,0:0|3:0,0:0:0:0:
36,182,75601,1,0,3:0:0:0:
36,182,75755,1,0,3:0:0:0:
99,256,75909,2,0,P|110:288|117:327,1,65,8|0,0:0|3:0,0:0:0:0:
200,367,76216,1,0,0:0:0:0:
293,338,76370,1,0,3:0:0:0:
344,254,76524,2,0,P|347:210|343:175,1,65,8|0,0:0|3:0,0:0:0:0:
286,110,76832,2,0,P|248:111|203:105,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
349,36,77293,1,0,3:0:0:0:
424,97,77447,6,0,L|440:167,1,65,4|0,3:2|0:0,0:0:0:0:
368,229,77755,2,0,L|353:165,1,65,8|0,0:0|0:0,0:0:0:0:
256,177,78063,2,0,P|211:203|193:232,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
285,83,78524,1,0,3:0:0:0:
195,43,78678,2,0,P|164:53|117:60,1,65,0|0,3:0|3:0,0:0:0:0:
48,110,78986,2,0,P|87:119|115:137,1,65,8|0,0:0|3:0,0:0:0:0:
192,184,79293,2,0,P|236:175|268:180,2,65,8|0|8,0:0|3:0|0:0,0:0:0:0:
182,281,79755,1,0,3:0:0:0:
256,343,79909,6,0,P|306:343|334:333,1,65,4|0,3:2|0:0,0:0:0:0:
351,246,80216,2,0,P|301:246|273:256,1,65,8|0,0:0|3:0,0:0:0:0:
320,338,80524,1,0,3:0:0:0:
417,336,80678,2,0,P|428:299|444:257,1,65,0|8,3:0|0:0,0:0:0:0:
457,178,80986,2,0,L|436:48,1,130,0|0,3:0|3:0,0:0:0:0:
339,37,81447,1,8,0:0:0:0:
339,37,81601,1,0,3:0:0:0:
254,85,81755,2,0,P|208:83|182:75,2,65,0|0|8,0:0|3:0|0:0,0:0:0:0:
326,150,82216,1,0,3:0:0:0:
339,246,82370,6,0,P|307:251|274:248,1,65,4|0,3:2|0:0,0:0:0:0:
179,223,82678,2,0,L|187:311,1,65,8|0,0:0|0:0,0:0:0:0:
110,351,82986,2,0,L|31:364,2,65,0|0|8,3:0|3:0|0:0,0:0:0:0:
205,331,83447,2,0,B|264:337|264:337|286:348|286:348|355:358,1,130,0|4,3:0|3:0,0:0:0:0:
428,336,83909,2,0,P|411:294|388:273,1,65,8|4,0:0|3:0,0:0:0:0:
318,222,84216,1,8,0:0:0:0:
391,157,84370,2,0,L|368:118,2,32.5,4|4|8,3:0|3:0|3:2,0:0:0:0:
488,144,84678,1,4,0:3:0:0:
441,58,84832,6,0,P|407:41|370:36,1,65,4|0,3:2|0:0,0:0:0:0:
284,17,85140,2,0,L|142:38,1,130,8|8,0:0|0:0,0:0:0:0:
90,109,85601,2,0,P|53:110|41:108,2,32.5,8|0|0,0:0|3:0|3:0,0:0:0:0:
172,161,85908,2,0,L|157:292,1,130,8|0,0:0|3:0,0:0:0:0:
243,336,86370,6,0,L|249:271,1,65,0|8,3:0|0:0,0:0:0:0:
321,205,86678,1,12,0:0:0:0:
447,56,86986,1,8,0:0:0:0:
350,39,87139,2,0,L|301:28,2,32.5,8|0|0,0:0|3:0|3:0,0:0:0:0:
391,127,87447,2,0,P|426:159|427:250,1,130,8|0,0:0|3:0,0:0:0:0:
379,320,87909,6,0,P|344:317|303:319,1,65,4|0,3:2|0:0,0:0:0:0:
216,316,88216,2,0,L|74:329,1,130,8|8,0:0|0:0,0:0:0:0:
54,235,88678,2,0,P|47:211|36:199,2,32.5,8|0|0,0:0|3:0|3:0,0:0:0:0:
151,221,88986,2,0,P|147:166|142:142,1,65,8|8,0:0|0:0,0:0:0:0:
97,71,89293,1,0,0:0:0:0:
185,30,89447,6,0,P|221:41|259:40,2,65,0|8|12,3:0|0:0|0:0,0:0:0:0:
242,116,89909,1,0,3:0:0:0:
245,213,90063,2,0,L|235:287,1,65,8|8,0:0|0:0,0:0:0:0:
291,357,90370,1,0,3:0:0:0:
369,298,90524,2,8,L|432:297,5,32.5,0|0|0|0|0|0,1:2|1:2|1:2|1:2|1:2|1:2,0:0:0:0:

"""


def main():
    # 解析 osu 内容
    osu_beatmap = parse_osu_file(SAMPLE_OSU)

    # 转换为 TauBeatmap
    tau_beatmap = convert_osu_beatmap(osu_beatmap)

    # 输出转换结果的简单信息
    print("Converted TauBeatmap Summary:")
    print(f"  Difficulty attributes: {tau_beatmap.difficulty_attributes}")
    print(f"  Hit object count: {len(tau_beatmap.hit_objects)}")

    # 计算难度属性（star/aim/speed/complexity等）
    difficulty_calculator = TauDifficultyCalculator(tau_beatmap)
    # 调试：先复用内部步骤以便查看每个技能的峰值和最终难度值
    difficulty_hit_objects = difficulty_calculator._create_difficulty_hit_objects()
    skills = difficulty_calculator._create_skills(difficulty_hit_objects)

    print(f"\nDiagnostic: difficulty_hit_objects count = {len(difficulty_hit_objects)}")
    # 打印前5个难度物件的关键信息
    for i, ho in enumerate(difficulty_hit_objects[:5]):
        print(f"  DHO {i}: index={ho.index}, start_time={ho.start_time}, delta_time={ho.delta_time}, strain_time={ho.strain_time}")
        if hasattr(ho, 'distance'):
            print(f"    distance={getattr(ho, 'distance', None)}, angle_range={getattr(ho, 'angle_range', None)}")
        if hasattr(ho, 'travel_distance'):
            print(f"    travel_distance={getattr(ho, 'travel_distance', None)}, lazy_travel_distance={getattr(ho, 'lazy_travel_distance', None)}, travel_time={getattr(ho, 'travel_time', None)}")

    # 导入评估器用于单独调用
    from tau.difficulty.evaluators.speedEvaluator import SpeedEvaluator
    from tau.difficulty.evaluators.complexityEvaluator import ComplexityEvaluator
    from tau.difficulty.evaluators.aimEvaluator import AimEvaluator
    from tau.objects import Beat, StrictHardBeat, SliderRepeat, Slider

    import statistics

    # 对前5个对象直接计算评估器输出
    for i, ho in enumerate(difficulty_hit_objects[:5]):
        try:
            sd = SpeedEvaluator.evaluate_difficulty(ho, difficulty_calculator._calculate_great_window(difficulty_calculator.beatmap.difficulty_attributes.get('overall_difficulty', 5.0)))
        except Exception as e:
            sd = f"error: {e}"
        try:
            cd = ComplexityEvaluator.evaluate_difficulty(ho)
        except Exception as e:
            cd = f"error: {e}"
        try:
            # AimEvaluator requires angled objects and last; we try-catch
            last = ho.previous(0)
            ad = AimEvaluator.evaluate_difficulty(ho, last, [None]) if last is not None else 0
        except Exception as e:
            ad = f"error: {e}"
        print(f"  Eval {i}: Speed={sd}, Complexity={cd}, Aim={ad}")

    # 统计评估器在所有 DHO 上的分布
    speed_values = []
    aim_values = []
    allowed = [Beat, StrictHardBeat, SliderRepeat, Slider]
    for i, ho in enumerate(difficulty_hit_objects):
        try:
            sv = SpeedEvaluator.evaluate_difficulty(ho, difficulty_calculator._calculate_great_window(difficulty_calculator.beatmap.difficulty_attributes.get('overall_difficulty', 5.0)))
        except Exception:
            sv = 0.0
        speed_values.append(sv)

        # 尝试计算 Aim（仅针对角度物件且有 last）
        try:
            # Only evaluate Aim for angled difficulty objects with a last angled
            from tau.difficulty.preprocessing.tauAngledDifficultyHitObject import TauAngledDifficultyHitObject
            if isinstance(ho, TauAngledDifficultyHitObject) and ho.last_angled is not None:
                last = ho.last_angled
                av = AimEvaluator.evaluate_difficulty(ho, last, allowed)
            else:
                av = 0.0
        except Exception:
            av = 0.0
        aim_values.append(av)

    def summarize(name, arr):
        if not arr:
            print(f"No data for {name}")
            return
        arr_sorted = sorted(arr, reverse=True)
        print(f"\n{name} stats:")
        print(f"  count: {len(arr)}")
        print(f"  mean: {statistics.mean(arr):.6f}")
        print(f"  median: {statistics.median(arr):.6f}")
        print(f"  max: {max(arr):.6f}")
        print(f"  top 5: {arr_sorted[:5]}")

    summarize('SpeedEvaluator', speed_values)
    summarize('AimEvaluator', aim_values)

    for skill in skills:
        # 通过处理所有难度物件来填充技能的应变峰值
        for ho in difficulty_hit_objects:
            skill.process(ho)

    # 输出每个技能的内部信息以便诊断
    skill_names = ["Aim", "AimNoSliders", "Speed", "Complexity"]
    for name, skill in zip(skill_names, skills):
        print(f"\nSkill: {name}")
        print(f"  strain_peaks count: {len(skill.strain_peaks)}")
        print(f"  top 5 peaks: {skill.strain_peaks[:5]}")
        print(f"  difficulty_value(): {skill.difficulty_value()}")

    # 最后使用calculate()得到封装好的属性
    difficulty_attributes: TauDifficultyAttributes = difficulty_calculator.calculate()

    print("\nCalculated Difficulty Attributes:")
    print(f"  Star rating: {difficulty_attributes.star_rating}")
    print(f"  Aim difficulty: {difficulty_attributes.aim_difficulty}")
    print(f"  Speed difficulty: {difficulty_attributes.speed_difficulty}")
    print(f"  Complexity difficulty: {difficulty_attributes.complexity_difficulty}")
    print(f"  AR: {difficulty_attributes.approach_rate}, OD: {difficulty_attributes.overall_difficulty}")

    # 构建一个代表SS的分数（满连、无miss、100%准确率）
    score = {
        'accuracy': 1.0,
        'max_combo': difficulty_attributes.max_combo or len(tau_beatmap.hit_objects),
        'mods': 0,
        'statistics': {
            'great': difficulty_attributes.notes_count,
            'ok': 0,
            'miss': 0
        }
    }

    # 计算性能（SS）
    perf_calc = TauPerformanceCalculator()
    performance = perf_calc.calculate(score, difficulty_attributes)

    print("\nPerformance for SS:")
    print(f"  Aim: {performance.aim:.2f}")
    print(f"  Speed: {performance.speed:.2f}")
    print(f"  Accuracy: {performance.accuracy:.2f}")
    print(f"  Complexity: {performance.complexity:.2f}")
    print(f"  Total PP: {performance.total:.2f}")
    print(f"  Hit object count: {len(tau_beatmap.hit_objects)}")

    # 打印前几个对象的类型和关键信息
    for i, obj in enumerate(tau_beatmap.hit_objects[:10]):
        cls_name = obj.__class__.__name__
        start_time = getattr(obj, 'start_time', getattr(obj, 'time', None))
        angle = getattr(obj, 'angle', None)
        print(f"  Object {i+1}: Type={cls_name}, StartTime={start_time}, Angle={angle}")


if __name__ == '__main__':
    main()
